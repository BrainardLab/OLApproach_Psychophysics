* NICOLAS, JACK, MICHAEL: We took off some subject/date/session from files stored in subject/date/session directory trees, but
   this needs to be done consistently throughout.
    - For example, corrected direction primaries, modulations, etc. - DONE

* NICOLAS, JACK, MICHAEL: We should review the prefs we set up in OLApproach_Psyhchophysics.  I think we may
not need all of them.

* NICOLAS, MICHAEL, JACK: Deal with all the broken calls where adding "OL" broke it. - DONE

* NICOLAS, MICHAEL, JACK.  Work together to debug all the changes made in the code that makes the modulations.
  This may involve some changes where the modulations are used, as we streamlined the return structure.  But,
  we didn't change any of the actual data returned, we don't think. - DONE

% NICOLAS, MICHAEL, JACK.  Work together to integrate the the style we developed for the modulations code into
  the i/o for the correct and validate code. - DONE

* NICOLAS: Dictionaries.  Each "thing" should have a type as its first field, and the defaults and checking
should be by type. - DONE?
  - Let's add comments to each default routine that says what each field is about.

* NICOLAS: Routines that cache backgrounds and directions should do a parameter field check on read, and
  call the cache stale if parameters have changed.  See comments we added together in 
  OLReceptorIsolateMakeBackgroundNominalPrimaries.

* NICOLAS: In the modulation dictionary, both a name and a file are given, but these should be isomorphic.
  Let's eliminate file and just keep the name.
    + Let's just use cell arrays direction in the dictionaries (background, direction, modulation) and get
      rid of calls to allwords, which just convert long comma separated strings into the corresponding cell
      array.  Why have the middleman?

* NICOLAS: Add "OL" to the "Merge ..." routines in OLDictionaries and the dictionary routines as well.

* MICHAEL: Create an OLApproach_TrialSequenceMR repository and start populating it.  Or at least think about
  how the current "driver" works and what we'll need to do to make it work in the new regime.

* US: Make sure field names match between the nominal and corrected versions for directions, so that the
  make modulations code can take either version transparently. 

* US: Worry about how to make cal file related routines in OneLightToolbox read/write from the right cal
  directory.  Currently the core routines respect a 'OneLightToolbox' preference, which is a good default.
  But we need some sort of wrappers available within approaches so we get to the right place.

* US: Should our code that makes modulations take direction names as a second argument, and then marry the
  passed direction with the modulation, rather than have the direction be part of the modulation dictionary
  definition. I tend to think so.  This will be more powerful and reduce the number of dictionary entries
  we need to write and maintain.

* US: Spectral correction.  There are lot of parameters for the spectrum seeking.  Should set
  these in a box specific dictionary, so we can customize seeking for each box. 
  - Might want to handle calibrations across boxes in this way too, having dictionary 
    entries that describe the calibration parameters for each box.

* DAVID: Add gitHub version info to the tbUseProject config files for the OneLight stuff, so we can keep
  machine configs straight.

* DAVID: Need to get light flux modulations working in new code.

* DAVID or NICOLAS: Need to consolidate the various pieces of code that compute fraction pigment bleached
  into a single routine that is called from everywhere else.

NOTES:

* It used to be the case that blank trials were handled by a special case in make modulation starts stops
  that forced the modulations to be zero, and did a check on the direction primary cache file name to
  decide when to do this.  No No No! Going forward, this will be handled by explicitly created a zero
  contrast direction file.

FOR THE FUTURE

* I think that files that get written into MELA_data do not use cache files. These
  get run per session and we have a scheme that keeps them apart.  This would apply
  to the corrected primaries and validations, for example, as well as the Modulations.

* OneLightToolbox. We need good comments in OLCalculateStartsStopsModulation.  Understanding this would then
  allow us to do a better job of commenting OLReceptorIsolateMakeModulationStartsStops.

* OLReceptorIsolateMakeModulationStartsStops - This is in desparate need of documentation
  and cleaning.

* SilentSubstitutionToolbox.  The routine GetHumanPhotoreceptorSS was updated
in a way that is not backwards compatible with 'Hemo' types, and this breaks
the routine OLEstimateConePhotopigmentFraction routine.  The latter routine is
in the OneLightToolbox, but should probably renamed and moved into the SilentSubstitutionToolbox.
  - The header comments of GetHumanPhotoreceptorSS are stale.
  - The "Hemo" code in OLEstimateConePhotopigmentFraction is currently commented out.
    Lines 58, 80-81, 88.

* SilentSubstitutionToolbox.  Routine ReceptorIsolateOptimBackgroundMulti needs its
comments updated to match what it does.
  - It is possible that we should make RecetporIsolate call through this, as in some
    sense it is a generalization.  But write some good unit tests first.
  - Deep question, in ReceptorIsolate should we be smoothing primaries or spectra?  We
    currently do the latter.

* There is old splatter code that we pulled out.  Probably want a way to run splatter analyses
easily, based on direction/validation files.  This should be modular.

* Organize saving and analysis of state measurements.  We make these when we calibrate, as
  we warm up the device, when we spectrum seek, and when we validate.  We should make it 
  easy to understand what we get and what we measure.
  - Also, OLAnalyzeCalOOC currently is very slow and prints out many many plots.  Most of these
    should be turned off by default.  They are useful when we are deeply trying to understand
    how the boxes work, but way too much to stare at every time.

* The direction cache files store backgrounds, differences, and +/- modulations.  This is redundant
  and can lead to inconsistencies.  Clean up someday.


        
        
    

    